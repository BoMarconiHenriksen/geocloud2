<?php
function microtime_float()
{
	list($utime, $time) = explode(" ", microtime());
	return ((float)$utime + (float)$time);
}
$startTime = microtime_float();

include("../../libs/functions.php");
include("inc/uri_parts.php");
$postgisschema = $parts[5];
$postgisdb = $parts[4];
include("../../libs/FirePHPCore/FirePHP.class.php");
include("../../libs/FirePHPCore/fb.php");
include("../../conf/main.php");
include("../../wfs/explodefilter.php");
include("../../libs/PEAR/XML/Unserializer.php");
include("../../libs/PEAR/XML/Serializer.php");
$srs = "900913";
$postgisObject = new postgis(); 

include '../../model/settings_viewer.php';
$settingsViewer = new Settings_viewer();
$settingsViewer = $settingsViewer->get(true);// move to a controller
include("../../model/tables.php");
include("controller/wmslayers_c.php");
?>
<html>
<head>
<title>MyGeoCloud - Online GIS - Store geographical data and make online maps - WFS and WMS</title>
<style type="text/css">
#map {
	width: 100%;
	height: 100%;
	position: absolute;
	top: 0px;
	left: 0px;
	z-index: 1;
}
body {
	margin: 0px;
	padding: 0px;
}
#legend {
	padding: 0px;
	position: absolute;
}
</style>
<link rel="stylesheet" type="text/css" href="/js/ext/resources/css/ext-all.css" />
<link rel="stylesheet" type="text/css" href="/styles/styles.css" />
<script type="text/javascript" src="/js/openlayers/OpenLayers.js"></script>
<script type="text/javascript" src="/js/openlayers/proj4js-combined.js"></script>
<script type="text/javascript" src="/js/openlayers/defs/EPSG900913.js"></script>
<!--<script type="text/javascript" src="http://openlayers.org/dev/OpenLayers.js"></script>-->
<script type="text/javascript" src="http://maps.google.com/maps?file=api&amp;v=2&amp;sensor=false&amp;key=<?php echo $gMapsApiKey;?>"></script>
<script type="text/javascript" src="/js/ext/adapter/ext/ext-base.js"></script>
<script type="text/javascript" src="/js/ext/ext-all.js"></script>
<script type="text/javascript" src="/js/GeoExt/lib/GeoExt.js"></script>
<script type="text/javascript" src="/js/jquery/1.6.4/jquery.min.js"></script>
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>
<script type="text/javascript">
//<![CDATA[
		var layer;
		var newLayerStrArr = [];
		var map,layer,popup,markers;
		var conf=[];
		var MapappWin = null;
		var popupOn = <?php  if ($_REQUEST['popup']) echo $_REQUEST['popup']; else echo "1";?>;
		//var popupOn = false;
		var base = [];
		var doNotUsePopUp = '<?= $_REQUEST['usepopup'] ?>';
		var layerStr = '<?= $_REQUEST['layers'] ?>';
		var graphicLayer;
		var renderGeometryArray;
		var resultHtml = "";
		var minxFromFilter=0;
		var minyFromFilter=0;
		var maxxFromFilter=0;
		var maxyFromFilter=0;
        var autocomplete; 
        var placeMarkers;
        var placePopup;
		var restrictedBounds;
		var viewPortSize;
		var settingsViewer = <?php echo json_encode($settingsViewer['data']); ?>;// JSON;
		
		//console.log(settingsViewer);
		
		if (!settingsViewer.minzoomlevel) {
			settingsViewer.minzoomlevel = 1;
		};
		if (!settingsViewer.maxzoomlevel) {
			settingsViewer.maxzoomlevel = 20;
		};
		//console.log(settingsViewer);
		function osm_getTileURL(bounds) {
            var res = this.map.getResolution();
            var x = Math.round((bounds.left - this.maxExtent.left) / (res * this.tileSize.w));
            var y = Math.round((this.maxExtent.top - bounds.top) / (res * this.tileSize.h));
            var z = this.map.getZoom();
            var limit = Math.pow(2, z);
 
            if (y < 0 || y >= limit) {
                return OpenLayers.Util.getImagesLocation() + "404.png";
            } else {
                x = ((x % limit) + limit) % limit;
                return this.url + z + "/" + x + "/" + y + "." + this.type;
            }
        }
		if ($("html").width()>400) {
			viewPortSize = "big";
		}
		else {
			viewPortSize = "small";
		}
<?php
$_REQUEST['signaturoff']="true";

if ($_REQUEST['popuppage']) {
    $popupPage = $_REQUEST['popuppage'];
}
else {
    $popupPage = $_SERVER['PHP_SELF'];
}

/* SET FILTER */

function array_map_r($arr)
{
    global $filterArr;
    global $namedLayer;
	//print_r($arr);
    foreach( $arr as $key => $value )
    {
		if (is_array($value['Filter'])) $filterArr = $value['Filter']; 
        if ( is_array( $value ))  array_map_r( $value );
    }  
}

if ($_REQUEST['sld'])
{
	$unserializer_options = array ('parseAttributes' => TRUE,'typeHints' => FALSE);
	$unserializer = new XML_Unserializer($unserializer_options);
	$status = $unserializer->unserialize(urldecode($_REQUEST['sld']));
	$sldArr = $unserializer->getUnserializedData();
	array_map_r($sldArr);
	$filter = parseFilter($filterArr,$sldArr['NamedLayer']['Name']);
	$query = "SELECT xmin(extent(transform(the_geom,{$srs}))) as minx, ymin(extent(transform(the_geom,{$srs}))) as miny, xmax(extent(transform(the_geom,{$srs}))) as maxx, ymax(extent(transform(the_geom,{$srs}))) as maxy FROM {$sldArr['NamedLayer']['Name']} WHERE ".$filter;
	//echo "<!-- TEST {$query} -->\n";
	$result = $postgisObject -> execQuery($query);
	$row = $postgisObject->fetchRow($result);
	$buffer = 100;
	if ($row[minx]) {
		echo "minxFromFilter = ".($row[minx]-$buffer).";\n";
		echo "maxxFromFilter = ".($row[maxx]+$buffer).";\n";
		echo "minyFromFilter = ".($row[miny]-$buffer).";\n";
		echo "maxyFromFilter = ".($row[maxy]+$buffer).";\n";
		$extentSetFromFilter = true;
	}
}
/* SET FILTER END */
if ((!$_REQUEST['lat']) || (!$_REQUEST['lon']))
{
    $_REQUEST['lon'] = $openLayers['center']['lon'];
    $_REQUEST['lat'] = $openLayers['center']['lat'];
}
if (!$_REQUEST['zoom'])
{
    $_REQUEST['zoom'] = $openLayers['zoom'];
    if ((!$_REQUEST['zoom']))
    {
	$_REQUEST['zoom']="0";
    } 
}
$openLayers['bounds'] = str_replace(" ",",",$openLayers['bounds']);
$openLayers['restricted'] = str_replace(" ",",",$openLayers['restricted']);


$layers = explode(";",$_REQUEST['layers']);
$u=0;
for($i = 0; $i < sizeof($layers); $i++){
	$bits = explode(",",$layers[$i]);
	$st = postgis::explodeTableName($bits[0]);
	foreach($responseWmsLayers['data'] as $arr) {
		if ($arr['f_table_name']==$st['table'] && $arr['f_table_schema']==$st['schema']) {
			echo "conf[$u] = ['{$bits[0]}','{$bits[1]}']\n";
			echo "conf[$u][2] ='".$arr['appformap_opacity']."'\n";
			echo "conf[$u][3] ='".$arr['f_table_title']."'\n";
			echo "conf[$u][4] ='".$bits[1]."'\n";
			echo "conf[$u][5] ='http://{$_SERVER['HTTP_HOST']}/wms/{$postgisdb}/{$st['schema']}/'\n";
				// Only default visible layers i layerStr
			if (!$bits[1]) {
				echo "newLayerStrArr.push('{$bits[0]}');\n";
			}
			$u++;
		}
	}
}
// Set extent from layer

$table = $settingsViewer['data']['default_extent'];
$geomField = $postgisObject->getGeometryColumns("public.".$table,"f_geometry_column");
if ($geomField) {
	$sql = "SELECT xmin(EXTENT(transform(".$geomField.",$srs))) AS TXMin,xmax(EXTENT(transform(".$geomField.",$srs))) AS TXMax, ymin(EXTENT(transform(".$geomField.",$srs))) AS TYMin,ymax(EXTENT(transform(".$geomField.",$srs))) AS TYMax  FROM public.".$table;
	$result = $postgisObject->execQuery($sql);
	$row = $postgisObject->fetchRow($result);
	if(!$extentSetFromFilter) {
		echo "minxFromFilter = ".($row[txmin]-$buffer).";\n";
		echo "maxxFromFilter = ".($row[txmax]+$buffer).";\n";
		echo "minyFromFilter = ".($row[tymin]-$buffer).";\n";
		echo "maxyFromFilter = ".($row[tymax]+$buffer).";\n";
	}
}
else {
	echo "minxFromFilter = -20037508;";
	echo "maxxFromFilter = 20037508;";
	echo "minyFromFilter = -20037508;";
	echo "maxyFromFilter = 20037508;";
}
print_r($postgisObject->PDOerror);
// End setting extent from layer

?>
//console.log(conf);
restrictedBounds = new OpenLayers.Bounds(minxFromFilter,minyFromFilter,maxxFromFilter,maxyFromFilter);
    layerStr = trim(newLayerStrArr.join(";"));
    OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {
        defaultHandlerOptions: {
            'single': true,
            'double': false,
            'pixelTolerance': 0,
            'stopSingle': false,
            'stopDouble': false
        },

        initialize: function(options) {
            this.handlerOptions = OpenLayers.Util.extend(
            {}, this.defaultHandlerOptions
        );
            OpenLayers.Control.prototype.initialize.apply(
            this, arguments
        );
            this.handler = new OpenLayers.Handler.Click(
            this, {
                'click': this.trigger
            }, this.handlerOptions
        );
        },
        trigger: function(e) {
        	if (popupOn) {
			var mapBounds = map.getExtent();
			var boundsArr =  mapBounds.toArray();
			var boundsStr =  boundsArr.join(",");
			var coords = map.getLonLatFromViewPortPx(e.xy);
			try {popup.destroy()} catch(e){};
			popup = new OpenLayers.Popup.FramedCloud("result",coords,null,"<div id='queryResult' style='z-index:1000;width:300px;height:100px;overflow:auto'>Wait..</div>",null, true);
			map.addPopup(popup)
			mapSize = map.getSize();
			Ext.Ajax.request({
                            url: '/apps/viewer/servers/query/<?php echo $postgisdb;?>/<?php echo $postgisschema;?>',
                            headers: {
                                //'Content-Type': 'application/json; charset=utf-8'
                            },
                            params: 'lan=<?php echo $_REQUEST["lan"];?>&proj=<?php echo $srs; ?>&lon=' + coords.lon + '&lat=' + coords.lat + '&layers=' + layerStr + '&type=json&extent=' + boundsStr + '&width=' + mapSize.w + '&height=' + mapSize.h,
                            success: function(http) {
		if (http.status == 200) {
			var response = eval('(' + http.responseText + ')');// JSON
			if (response.html!=false) {
				document.getElementById("queryResult").innerHTML=response.html;
				resultHtml = response.html; // Global var
			}
			else {
				document.getElementById("queryResult").innerHTML= "Found nothing";
			}
			//addGraphicLayer("Resultat",response.overlayMapimageUrl,response.extent);
			vectors.removeAllFeatures();
			map.raiseLayer(vectors,10);
			for ( var i=0; i<response.renderGeometryArray.length; ++i ){
				deserialize(response.renderGeometryArray[i][0]);
				}
			renderGeometryArray = response.renderGeometryArray; // Global var
		}
	}
                            //failure: test
                        });
		}
	}
    })
;

    var layerArr =[]
    function addLayer(name,title,opacity,connectionString,notVisible) {
        if (notVisible) var visible = false;
        else var visible = true;
        layerArr[name] = new OpenLayers.Layer.WMS(title,connectionString + "?SLD_BODY=<?php echo urlencode($_REQUEST['sld'])?>&",{layers:name,transparent:true},{singleTile:true,opacity:opacity,isBaseLayer:false,visibility:visible,wrapDateLine:false});
        map.addLayer(layerArr[name]);
    }
   
       
    function deserialize(element) {
			
            var type = "wkt";
			var format = new OpenLayers.Format.WKT;
            var features = format.read(element);
            var bounds;
            if(features) {
                if(features.constructor != Array) {
                    features = [features];
                }
                for(var i=0; i<features.length; ++i) {
                    if (!bounds) {
                        bounds = features[i].geometry.getBounds();
                    } else {
                        bounds.extend(features[i].geometry.getBounds());
                    }
 
                }
                vectors.addFeatures(features);
                //map.zoomToExtent(bounds);
                var plural = (features.length > 1) ? 's' : '';
                element = features.length + ' feature' + plural + ' added';
            } else {
                element = 'Bad input ' + type;
            }
        }
   

    function removeLayer(name){
        map.removeLayer(layerArr[name]);
    }
    function removeAllLayers(){
        for(var i in layerArr) {
            var value = layerArr[i];
            if (i!="kommunegrs") map.removeLayer(value);
        }
    }
    function addLegend(layers) {
		var param = 'layers=' + layers + '&amp;type=text&amp;lan=<?php echo $_REQUEST["lan"];?>';
		$('#legendContent').load('/apps/viewer/servers/legend/<?php echo $postgisdb;?>?' + param);
		//document.getElementById("legendContent").innerHTML = "/apps/viewer/servers/legend/<?php echo $postgisdb;?>?" + param;
    }
    function trim(s) {
        s = s.replace(/(^\;*)|(\;*$)/gi,"");
        s = s.replace(/[;]{2,}/gi,";");
        //s = s.replace(/\n /,"\n");
        return s;
    }
    function printVersion()
    {
        var mapBounds = map.getExtent();
        var boundsArr =  mapBounds.toArray();
        var boundsStr =  boundsArr.join(",");
        var mapSize = map.getSize();
        document.printForm.renderGeometryArray.value = renderGeometryArray;
        document.printForm.extent.value = boundsStr;
        document.printForm.width.value = mapSize.w;
        document.printForm.height.value = mapSize.h;
        document.printForm.layer.value = layerStr;
        document.printForm.resultHtml.value = resultHtml;
        document.printForm.bgMap.value = map.baseLayer.name;
		document.printForm.location.value = "<?php echo $_REQUEST["location"];?>";
		document.printForm.lan.value = "<?php echo $_REQUEST["lan"];?>";
        document.printForm.action="print.phtml";
        document.printForm.target="blank";
        document.printForm.submit();
        document.printForm.target="";
        document.printForm.action="<? echo $_SERVER['PHP_SELF']; ?>";
    }
	function openMapWin(page,width,height)
	{
		var iLangID = iLangID;
		var iWidth 					= width;
		var iHeight 				= height;
		var strWinName = "MapServer";
		var strURL = page;
		var popleft = (screen.width - iWidth) / 2;
		var poptop = (screen.height - iHeight) / 2;
		
		var strParameters 	= "width=" + iWidth + ",height=" + iHeight + 
							",resizable=1,scrollbars=0,status=1,left="+
							popleft+",top="+poptop+",screenX="+popleft+
							",screenY="+poptop+",toolbar=0";

		if (MapappWin == null) openWin = true;
		else if (MapappWin.closed) openWin = true;
		else openWin = false;
		
		if (openWin) {
			MapappWin 	= window.open(strURL, strWinName, strParameters);
			MapappWin.focus();
		} else {
			if (!MapappWin.closed) {
				MapappWin.focus();
			}
		}
	}
	function inFrames()
	{
		return ( top != self );
	}
	function createPointFromStr(str){
		var coordArr = str.split(" ");
		var point = new OpenLayers.Marker(new OpenLayers.LonLat(points1[0],points1[1]));
		return point;
	}

	// We need to use jQuery load function to make sure that document.namespaces are ready. Only IE
	$(window).load(function(){
	   
		var legendWin;
		var searchWin;

	//if ((!inFrames()) || (doNotUsePopUp=='false')) document.getElementById("popupButton").style.display = "none";
	function mapLayerChanged(event) {
            var newlayerArr =[];
            layerStrArr = layerStr.split(";");
            for (var i in layerArr) {
                if (layerArr[i] == event.layer) {
                    layer = i;
                }
            }
            if (layer) {
                if (!event.layer.visibility) {
                    for (i=0;i<layerStrArr.length;i++)
                    {
                        if (layerStrArr[i]==layer) var key = i;
                    }
                    layerStrArr.splice(key,1);
                    key = null;
                }
                if (event.layer.visibility) {
                    layerStrArr.push(layer);
                }
                layerStr = trim(layerStrArr.join(";"));
                //alert(layerStr);
                addLegend(layerStr);
                layer = null;
            }
        }
		if (viewPortSize=="big"){
			var mapControls = [
				new OpenLayers.Control.PanZoomBar(),
				new OpenLayers.Control.ScaleLine(),
				new OpenLayers.Control.LayerSwitcher(),
				new OpenLayers.Control.Navigation({'zoomWheelEnabled': false})
			];
		}
		else {
			var mapControls = [
				new OpenLayers.Control.Navigation({'zoomWheelEnabled': false}),
				new OpenLayers.Control.LayerSwitcher()
			];
			mapControls = null;
		}
        map = new OpenLayers.Map(document.getElementById("mapel"),{
		controls:mapControls,
        numZoomLevels:20,
		projection: new OpenLayers.Projection("EPSG:<?php echo $srs;?>"),
		maxResolution: 156543.0339,
		units: "m",
		//minResolution: "auto",
        eventListeners: {"changelayer": mapLayerChanged}}
        );
        
	map.maxExtent = new OpenLayers.Bounds.fromString("-20037508, -20037508, 20037508, 20037508");
	var base = [];
	base.push(new OpenLayers.Layer.Google("Google Normal", {
		type: G_NORMAL_MAP,
		minZoomLevel: settingsViewer.minzoomlevel,
		maxZoomLevel: settingsViewer.maxzoomlevel,
		sphericalMercator: true
	}));
	base.push(new OpenLayers.Layer.Google("Google Hybrid", {
		type: G_HYBRID_MAP,
		minZoomLevel: settingsViewer.minzoomlevel,
		maxZoomLevel: settingsViewer.maxzoomlevel,
		sphericalMercator: true
	}));
	base.push(new OpenLayers.Layer.Google("Google Satellite", {
		type: G_SATELLITE_MAP,
		minZoomLevel: settingsViewer.minzoomlevel,
		maxZoomLevel: settingsViewer.maxzoomlevel,
		sphericalMercator: true
	}));
	base.push(new OpenLayers.Layer.Google("Google Terrain", {
		type: G_PHYSICAL_MAP,
		minZoomLevel: settingsViewer.minzoomlevel,
		maxZoomLevel: settingsViewer.maxzoomlevel,
		sphericalMercator: true
	}));
	base.push(new OpenLayers.Layer.TMS(
                "OpenStreetMap",
                "http://tile.openstreetmap.org/",
                {
                    type: 'png', getURL: osm_getTileURL,
                    displayOutsideMaxExtent: false,
                    attribution: '<a href="http://www.openstreetmap.org/">OpenStreetMap</a>'
                }
            )
	);
	/*
		base.push(new OpenLayers.Layer.WMS("KMS", "http://kortforsyningen.kms.dk/service?login=Kommune550&password=Sdfghjkl10&servicename=topo_skaermkort&VERSION=1.1.0&format=image/png&styles=&",{layers:"dtk_skaermkort"},{projection:"EPSG:25832",maxResolution: "auto",singleTile:false,transitionEffect:"resize"}));
	*/
	// Add WMS baselayers
	<?php
	if (isset($responseWmsLayers['data'])){
	foreach($responseWmsLayers['data'] as $arr) {
		if ($arr['baselayer']) {
	?>
	base.push(new OpenLayers.Layer.WMS("<?php echo $arr['f_table_title'];?>","<?php echo "http://{$_SERVER['HTTP_HOST']}/wms/{$postgisdb}/{$arr['f_table_schema']}/";?>",{layers:"<?php echo $arr['f_table_schema'];?>.<?php echo $arr['f_table_name'];?>",transparent:true},{singleTile:true,isBaseLayer:true,wrapDateLine:false}));
	<?php }}}?>

	
	vectors = new OpenLayers.Layer.Vector("Vector Layer");
 
            map.addLayers([vectors]);
			

        map.addLayers(base);
        for (var i=0; i<conf.length; i++) {
            if (conf[i][1]) {popupOn=true}
            if (conf[i][0]) {
		    addLayer(conf[i][0],conf[i][3],conf[i][2],conf[i][5],conf[i][4]);
            }
        }
        addLegend(layerStr);
        
        //Start paa url zoom sdsd
		<?php
		if ($_REQUEST['bounds']) {
			$boundsArr = explode(",",$_REQUEST['bounds']); 
		?>
			var minxFromFilter = <?php echo $boundsArr[0];?>;
			var minyFromFilter = <?php echo $boundsArr[1];?>;
			var maxxFromFilter = <?php echo $boundsArr[2];?>;
			var maxyFromFilter = <?php echo $boundsArr[3];?>;
		<?php } ?> 
		//End p� url zoom

       // map.setCenter(new OpenLayers.LonLat(<?= $_REQUEST['lon'] ?>,<?= $_REQUEST['lat'] ?>), <?= $_REQUEST['zoom'] ?>);
        
          var click = new OpenLayers.Control.Click();
        map.addControl(click);
        click.activate();
		
// Navigation history - two "button" controls
	var ctrl, toolbarItems = [], action, actions = {};
    ctrl = new OpenLayers.Control.NavigationHistory();
    map.addControl(ctrl);
   action = new GeoExt.Action({
        text: "Signatur",
	 handler:function(objRef){
		if(!legendWin){
		    legendWin = new Ext.Window({
			title: "Legend",
			layout:'fit',
			width:200,
			height:300,
			closeAction:'hide',
			contentEl:legendContent,
			x:5,
			y:120
		    });
		}
	    if(typeof(objRef)=="object"){
            legendWin.show(objRef);
        	}else{
            	legendWin.show();
        	}//end if object reference was passed
		
	    },
        tooltip: "Vis signatur"
    });
    actions["legend"] = action;
    toolbarItems.push(action);

    action = new GeoExt.Action({
        text: "Print",
        handler: printVersion,
        tooltip: "Print kortet"
    });
    actions["print"] = action;
    //toolbarItems.push(action);
   action = new GeoExt.Action({
        text: "Find",
	 handler:function(objRef){
		if(!searchWin){
            $(".pac-container").css("z-index","10000"); // We make sure that Google auto complete is shown on top
		    searchWin = new Ext.Window({
			title: "Search",
			layout:'fit',
			width:300,
			height:300,
            plain: true,
			closeAction:'hide',
			contentEl:searchContent,
			x:5,
			y:120
		    });
		}
	    if(typeof(objRef)=="object"){
            searchWin.show(objRef);
        	}else{
            	searchWin.show();
        	}//end if object reference was passed
		
	    },
        tooltip: "Search"
    });
    actions["legend"] = action;
    toolbarItems.push(action);

    toolbarItems.push("->");
    action = new GeoExt.Action({
        text: "<<",
        control: ctrl.previous,
        disabled: true,
        tooltip: "previous in history"
    });
    actions["previous"] = action;
    toolbarItems.push(action);

    action = new GeoExt.Action({
        text: ">>",
        control: ctrl.next,
        disabled: true,
        tooltip: "next in history"
    });
    actions["next"] = action;
    toolbarItems.push(action);

new Ext.Viewport({
        layout: "border",
        items: {
            region: "center",
            id: "mappanel",
            xtype: "gx_mappanel",
            map: map,
        tbar: toolbarItems 
        }
    });

var mapPanel = Ext.getCmp("mappanel");

if (minxFromFilter!=0) {
	map.zoomToExtent(restrictedBounds);
	map.restrictedExtent = restrictedBounds;
};
    var p1 = transformPoint(minxFromFilter,minyFromFilter,"EPSG:<?php echo $srs;?>","EPSG:4326");
    var p2 = transformPoint(maxxFromFilter,maxyFromFilter,"EPSG:<?php echo $srs;?>","EPSG:4326");
var defaultBounds = new google.maps.LatLngBounds(
  new google.maps.LatLng(p1.y,p1.x),
  new google.maps.LatLng(p2.y,p2.x)
);

var input = document.getElementById('gAddress');
var options = {
  bounds: defaultBounds
  //types: ['establishment']
};
var autocomplete = new google.maps.places.Autocomplete(input, options);
    //console.log(autocomplete.getBounds());

google.maps.event.addListener(autocomplete, 'place_changed', function() {
  var place = autocomplete.getPlace();
  //console.log(place);
  //console.log(place.geometry.location.lat());
 
  var p = transformPoint(place.geometry.location.lng(),place.geometry.location.lat(),"EPSG:4326","EPSG:<?php echo $srs;?>")
 var point = new OpenLayers.LonLat(p.x,p.y);
  map.setCenter(point,15);
try {placeMarkers.destroy()} catch(e){};
try {placePopup.destroy()} catch(e){};
placeMarkers = new OpenLayers.Layer.Markers( "Markers" );
map.addLayer(placeMarkers);

var size = new OpenLayers.Size(21,25);
var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
var icon = new OpenLayers.Icon('http://www.openlayers.org/dev/img/marker.png', size, offset);
placeMarkers.addMarker(new OpenLayers.Marker(point,icon));
placeMarkers.addMarker(new OpenLayers.Marker(point,icon.clone()));

placePopup = new OpenLayers.Popup.FramedCloud("place",point,null,"<div id='placeResult' style='z-index:1000;width:200px;height:50px;overflow:auto'>" + place.formatted_address + "</div>",null, true);
map.addPopup(placePopup)
	
  
});
function transformPoint(lat,lon,s,d) {
    var source = new Proj4js.Proj(s);    //source coordinates will be in Longitude/Latitude
    var dest = new Proj4js.Proj(d);
    var p = new Proj4js.Point(lat,lon);
    Proj4js.transform(source, dest, p);
   return p;
}

});
//]]>
</script>
</head>
<body>
<form name="printForm" id="printForm" method="post">
	<input type="hidden" name="extent"/>
	<input type="hidden" name="width" />
	<input type="hidden" name="height" />
	<input type="hidden" name="renderGeometryArray" />
	<input type="hidden" name="layer" />
	<input type="hidden" name="resultHtml" />
	<input type="hidden" name="bgMap" />
	<input type="hidden" name="location" />
	<input type="hidden" name="lan" />
	<input type="hidden" name="type" value="json" />
</form>
<div id="mapel"></div>
<div
	style="position: absolute; top: 5px; left: 110px; z-index: 500; display: none;">
<a id="popupButton"
	href="javascript:openMapWin('<?php echo $popupPage;?>?<?php echo urlencode($_SERVER['QUERY_STRING']);?>',<?php echo $openLayers['popupSize']['x'];?>100,<?php echo $openLayers['popupSize']['y'];?>100)">aaben
som pop-up</a></div>



<div id="legendContent"></div>
<div style="padding: 5px" id="searchContent"><input style="width: 270px"
	type='text' id='gAddress' name='gAddress' value='' />
<p>Skriv adresse eller stednavn</p>
</div>
</body>
</html>
